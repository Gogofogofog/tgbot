import logging

import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import datetime

import main

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot('5296800210:AAHCEde6JJpJZoZQpisQylxjXXDR1nMmeGI')


@bot.message_handler(commands=['start'])
def start(msg):
    try:
        main.get_developer_info(msg.chat.id)[0]
        bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=gen_markup())

    except:
        bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª.')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(msg.chat.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ª–æ–≥–∏–Ω:',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, login)


@bot.message_handler(commands=['menu'])
def menu(msg):
    bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=gen_markup())


def gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏üìä", callback_data="marks"),
               InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏üõ†", callback_data="settings"))
    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "marks":
        data = main.get_developer_info(call.from_user.id)
        if data == None:
            bot.send_message(call.from_user.id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ü–µ–Ω–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        else:
            mes = bot.send_message(call.from_user.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
            marks = main.check_marks(data[0], data[1])
            if marks:
                text = 'üìà*–û—Ü–µ–Ω–∫–∏ –Ω–∞ ' + datetime.date.today().strftime("%d.%m.%Y") + '*üìÖ\n'
                for key in marks:
                    if key == 'average':
                        text += '_–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º:_ *' + marks[key] + '*'
                    else:
                        text += '_' + key.capitalize() + ':_ ' + marks[key]['marks'] + ' - *' + marks[key]['average_mark'] + '*\n'
                bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=text, parse_mode='Markdown', reply_markup=gen_markup())
                print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            else:
                bot.send_message(call.from_user.id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ü–µ–Ω–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

    if call.data == 'settings':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(call.from_user.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ª–æ–≥–∏–Ω:', reply_markup=markup)
        bot.register_next_step_handler(sent, login)


def login(msg):
    if msg.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        bot.send_message(msg.chat.id, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏..', reply_markup=gen_markup())
    else:
        if main.get_developer_info(msg.chat.id) == None:
            main.insert_varible_into_table(msg.chat.id, msg.text, '0')
        else:
            main.update_sqlite_table(msg.chat.id, msg.text, '0')
        print(msg.chat.id, msg.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∂—É—Ä–Ω–∞–ª–∞:', reply_markup=markup)
        bot.register_next_step_handler(sent, password)


def password(msg):
    if msg.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        bot.send_message(msg.chat.id, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏..', reply_markup=gen_markup())
    else:
        main.update_password(msg.chat.id, msg.text)
        print(msg.chat.id, msg.text)
        bot.send_message(msg.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!', reply_markup=gen_markup())


print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

bot.infinity_polling()